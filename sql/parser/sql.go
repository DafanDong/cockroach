// Code generated by go yacc.
//line sql.y:6
package parser

import __yyfmt__ "fmt"

//line sql.y:6
import (
	"strconv"
	"strings"
)

func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*tokenizer).parseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*tokenizer).allowComments = allow
}

func forceEOF(yylex interface{}) {
	yylex.(*tokenizer).forceEOF = true
}

func parseInt(yylex yyLexer, s string) (int, bool) {
	i, err := strconv.Atoi(s)
	if err != nil {
		yylex.Error(err.Error())
		return -1, false
	}
	return i, true
}

//line sql.y:36
type yySymType struct {
	yys         int
	empty       struct{}
	statement   Statement
	selStmt     SelectStatement
	byt         byte
	str         string
	str2        []string
	selectExprs SelectExprs
	selectExpr  SelectExpr
	columns     Columns
	colName     *ColName
	tableExprs  TableExprs
	tableExpr   TableExpr
	smTableExpr SimpleTableExpr
	tableName   *TableName
	indexHints  *IndexHints
	expr        Expr
	boolExpr    BoolExpr
	valExpr     ValExpr
	tuple       Tuple
	valExprs    ValExprs
	values      Values
	subquery    *Subquery
	caseExpr    *CaseExpr
	whens       []*When
	when        *When
	orderBy     OrderBy
	order       *Order
	limit       *Limit
	insRows     InsertRows
	updateExprs UpdateExprs
	updateExpr  *UpdateExpr
	tableDefs   TableDefs
	tableDef    TableDef
	columnType  ColumnType
	intVal      int
	intVal2     [2]int
	boolVal     bool
}

const tokLexError = 57346
const tokSelect = 57347
const tokInsert = 57348
const tokUpdate = 57349
const tokDelete = 57350
const tokFrom = 57351
const tokWhere = 57352
const tokGroup = 57353
const tokHaving = 57354
const tokOrder = 57355
const tokBy = 57356
const tokLimit = 57357
const tokOffset = 57358
const tokFor = 57359
const tokAll = 57360
const tokDistinct = 57361
const tokAs = 57362
const tokExists = 57363
const tokIn = 57364
const tokIs = 57365
const tokLike = 57366
const tokBetween = 57367
const tokNull = 57368
const tokAsc = 57369
const tokDesc = 57370
const tokValues = 57371
const tokInto = 57372
const tokDuplicate = 57373
const tokKey = 57374
const tokDefault = 57375
const tokSet = 57376
const tokLock = 57377
const tokInt = 57378
const tokTinyInt = 57379
const tokSmallInt = 57380
const tokMediumInt = 57381
const tokBigInt = 57382
const tokInteger = 57383
const tokReal = 57384
const tokDouble = 57385
const tokFloat = 57386
const tokDecimal = 57387
const tokNumeric = 57388
const tokDate = 57389
const tokTime = 57390
const tokDateTime = 57391
const tokTimestamp = 57392
const tokChar = 57393
const tokVarChar = 57394
const tokBinary = 57395
const tokVarBinary = 57396
const tokText = 57397
const tokTinyText = 57398
const tokMediumText = 57399
const tokLongText = 57400
const tokBlob = 57401
const tokTinyBlob = 57402
const tokMediumBlob = 57403
const tokLongBlob = 57404
const tokBit = 57405
const tokEnum = 57406
const tokTrue = 57407
const tokFalse = 57408
const tokID = 57409
const tokString = 57410
const tokNumber = 57411
const tokValueArg = 57412
const tokComment = 57413
const tokLE = 57414
const tokGE = 57415
const tokNE = 57416
const tokNullSafeEqual = 57417
const tokUnion = 57418
const tokMinus = 57419
const tokExcept = 57420
const tokIntersect = 57421
const tokJoin = 57422
const tokStraightJoin = 57423
const tokLeft = 57424
const tokRight = 57425
const tokInner = 57426
const tokOuter = 57427
const tokCross = 57428
const tokNatural = 57429
const tokUse = 57430
const tokForce = 57431
const tokOn = 57432
const tokUsing = 57433
const tokAnd = 57434
const tokOr = 57435
const tokConcat = 57436
const tokNot = 57437
const tokUnary = 57438
const tokCase = 57439
const tokWhen = 57440
const tokThen = 57441
const tokElse = 57442
const tokEnd = 57443
const tokCreate = 57444
const tokAlter = 57445
const tokDrop = 57446
const tokRename = 57447
const tokTruncate = 57448
const tokShow = 57449
const tokDatabase = 57450
const tokDatabases = 57451
const tokTable = 57452
const tokTables = 57453
const tokIndex = 57454
const tokView = 57455
const tokColumns = 57456
const tokFull = 57457
const tokTo = 57458
const tokIgnore = 57459
const tokIf = 57460
const tokUnique = 57461
const tokUnsigned = 57462
const tokPrimary = 57463

var yyToknames = []string{
	"tokLexError",
	"tokSelect",
	"tokInsert",
	"tokUpdate",
	"tokDelete",
	"tokFrom",
	"tokWhere",
	"tokGroup",
	"tokHaving",
	"tokOrder",
	"tokBy",
	"tokLimit",
	"tokOffset",
	"tokFor",
	"tokAll",
	"tokDistinct",
	"tokAs",
	"tokExists",
	"tokIn",
	"tokIs",
	"tokLike",
	"tokBetween",
	"tokNull",
	"tokAsc",
	"tokDesc",
	"tokValues",
	"tokInto",
	"tokDuplicate",
	"tokKey",
	"tokDefault",
	"tokSet",
	"tokLock",
	"tokInt",
	"tokTinyInt",
	"tokSmallInt",
	"tokMediumInt",
	"tokBigInt",
	"tokInteger",
	"tokReal",
	"tokDouble",
	"tokFloat",
	"tokDecimal",
	"tokNumeric",
	"tokDate",
	"tokTime",
	"tokDateTime",
	"tokTimestamp",
	"tokChar",
	"tokVarChar",
	"tokBinary",
	"tokVarBinary",
	"tokText",
	"tokTinyText",
	"tokMediumText",
	"tokLongText",
	"tokBlob",
	"tokTinyBlob",
	"tokMediumBlob",
	"tokLongBlob",
	"tokBit",
	"tokEnum",
	"tokTrue",
	"tokFalse",
	"tokID",
	"tokString",
	"tokNumber",
	"tokValueArg",
	"tokComment",
	"tokLE",
	"tokGE",
	"tokNE",
	"tokNullSafeEqual",
	"'('",
	"'='",
	"'<'",
	"'>'",
	"'~'",
	"tokUnion",
	"tokMinus",
	"tokExcept",
	"tokIntersect",
	"','",
	"tokJoin",
	"tokStraightJoin",
	"tokLeft",
	"tokRight",
	"tokInner",
	"tokOuter",
	"tokCross",
	"tokNatural",
	"tokUse",
	"tokForce",
	"tokOn",
	"tokUsing",
	"tokAnd",
	"tokOr",
	"tokConcat",
	"tokNot",
	"'&'",
	"'|'",
	"'^'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'.'",
	"tokUnary",
	"tokCase",
	"tokWhen",
	"tokThen",
	"tokElse",
	"tokEnd",
	"tokCreate",
	"tokAlter",
	"tokDrop",
	"tokRename",
	"tokTruncate",
	"tokShow",
	"tokDatabase",
	"tokDatabases",
	"tokTable",
	"tokTables",
	"tokIndex",
	"tokView",
	"tokColumns",
	"tokFull",
	"tokTo",
	"tokIgnore",
	"tokIf",
	"tokUnique",
	"tokUnsigned",
	"tokPrimary",
}
var yyStatenames = []string{}

const yyEofCode = 1
const yyErrCode = 2
const yyMaxDepth = 200

//line yacctab:1
var yyExca = []int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 101,
	22, 217,
	23, 217,
	24, 217,
	25, 217,
	72, 217,
	73, 217,
	74, 217,
	75, 217,
	77, 217,
	78, 217,
	79, 217,
	100, 217,
	101, 217,
	102, 217,
	103, 217,
	104, 217,
	105, 217,
	106, 217,
	107, 217,
	108, 217,
	109, 217,
	-2, 148,
	-1, 102,
	22, 218,
	23, 218,
	24, 218,
	25, 218,
	72, 218,
	73, 218,
	74, 218,
	75, 218,
	77, 218,
	78, 218,
	79, 218,
	100, 218,
	101, 218,
	102, 218,
	103, 218,
	104, 218,
	105, 218,
	106, 218,
	107, 218,
	108, 218,
	109, 218,
	-2, 149,
}

const yyNprod = 280
const yyPrivate = 57344

var yyTokenNames []string
var yyStates []string

const yyLast = 777

var yyAct = []int{

	109, 449, 403, 325, 141, 271, 67, 98, 451, 185,
	183, 410, 279, 274, 107, 228, 106, 317, 134, 118,
	265, 456, 478, 446, 186, 3, 501, 93, 491, 28,
	29, 30, 31, 473, 203, 94, 158, 159, 70, 72,
	452, 89, 478, 478, 80, 385, 387, 82, 323, 478,
	478, 85, 58, 478, 69, 478, 90, 292, 293, 294,
	295, 296, 152, 297, 298, 329, 323, 287, 152, 152,
	73, 99, 257, 145, 500, 255, 133, 135, 135, 68,
	135, 78, 140, 386, 142, 258, 266, 50, 433, 146,
	144, 51, 149, 150, 499, 498, 136, 155, 138, 432,
	497, 494, 481, 431, 303, 479, 368, 477, 389, 81,
	84, 182, 184, 53, 393, 187, 394, 328, 322, 188,
	312, 310, 52, 208, 256, 447, 157, 445, 70, 158,
	159, 70, 194, 207, 201, 197, 132, 48, 135, 282,
	128, 47, 206, 44, 69, 396, 46, 69, 139, 222,
	213, 266, 48, 315, 223, 224, 209, 233, 207, 39,
	408, 40, 41, 99, 42, 43, 235, 236, 73, 15,
	244, 237, 318, 232, 242, 243, 238, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 225, 57, 226, 54,
	117, 55, 56, 123, 169, 170, 171, 172, 173, 283,
	70, 70, 259, 99, 99, 114, 270, 130, 234, 277,
	205, 280, 276, 430, 284, 148, 69, 272, 318, 285,
	261, 263, 429, 269, 171, 172, 173, 158, 159, 189,
	190, 71, 113, 115, 116, 409, 273, 427, 428, 383,
	191, 219, 379, 377, 121, 245, 302, 380, 378, 382,
	232, 305, 306, 381, 304, 153, 292, 293, 294, 295,
	296, 217, 297, 298, 28, 29, 30, 31, 309, 119,
	120, 130, 476, 99, 316, 204, 124, 474, 257, 440,
	398, 290, 231, 320, 135, 314, 131, 324, 321, 466,
	311, 230, 199, 465, 15, 220, 464, 122, 463, 459,
	191, 422, 370, 420, 64, 419, 375, 376, 411, 416,
	232, 232, 414, 262, 210, 112, 195, 193, 392, 192,
	117, 125, 73, 123, 70, 301, 395, 71, 400, 156,
	280, 152, 79, 405, 200, 114, 390, 401, 404, 388,
	399, 371, 406, 221, 412, 202, 216, 218, 215, 143,
	130, 417, 418, 65, 87, 86, 231, 88, 450, 101,
	102, 97, 113, 115, 116, 230, 127, 472, 126, 421,
	104, 129, 300, 471, 121, 423, 73, 436, 483, 369,
	83, 425, 397, 63, 426, 259, 424, 166, 167, 168,
	169, 170, 171, 172, 173, 103, 484, 448, 308, 119,
	120, 95, 434, 281, 496, 15, 124, 435, 211, 15,
	16, 17, 18, 437, 91, 92, 454, 147, 455, 59,
	457, 457, 453, 457, 61, 326, 45, 122, 461, 268,
	239, 260, 240, 241, 374, 462, 32, 327, 19, 275,
	373, 289, 458, 470, 460, 204, 137, 77, 76, 468,
	469, 404, 75, 34, 35, 36, 37, 38, 66, 495,
	457, 467, 15, 33, 70, 457, 457, 457, 70, 485,
	444, 407, 342, 341, 489, 340, 490, 339, 492, 493,
	272, 480, 334, 333, 69, 112, 486, 487, 488, 332,
	117, 15, 330, 123, 278, 415, 413, 502, 20, 475,
	74, 212, 286, 503, 214, 114, 49, 112, 198, 482,
	441, 402, 117, 372, 288, 123, 313, 196, 264, 111,
	108, 22, 23, 26, 24, 25, 21, 114, 110, 101,
	102, 97, 113, 115, 116, 319, 105, 267, 160, 100,
	104, 384, 229, 291, 121, 227, 151, 96, 299, 154,
	60, 101, 102, 71, 113, 115, 116, 27, 62, 112,
	14, 13, 104, 12, 117, 103, 121, 123, 11, 119,
	120, 95, 10, 9, 8, 7, 124, 6, 5, 114,
	4, 117, 2, 1, 123, 0, 0, 103, 0, 0,
	0, 119, 120, 0, 0, 0, 114, 122, 124, 0,
	0, 0, 0, 101, 102, 71, 113, 115, 116, 0,
	0, 0, 0, 0, 104, 0, 442, 443, 121, 122,
	189, 190, 71, 113, 115, 116, 161, 165, 163, 164,
	439, 191, 0, 0, 0, 121, 0, 0, 0, 103,
	0, 0, 0, 119, 120, 0, 0, 391, 0, 174,
	124, 166, 167, 168, 169, 170, 171, 172, 173, 0,
	119, 120, 0, 0, 0, 0, 0, 124, 0, 0,
	0, 122, 0, 0, 0, 0, 178, 179, 180, 181,
	0, 175, 176, 177, 0, 0, 0, 0, 122, 174,
	0, 166, 167, 168, 169, 170, 171, 172, 173, 438,
	0, 0, 0, 0, 174, 162, 166, 167, 168, 169,
	170, 171, 172, 173, 174, 0, 166, 167, 168, 169,
	170, 171, 172, 173, 307, 0, 174, 0, 166, 167,
	168, 169, 170, 171, 172, 173, 174, 0, 166, 167,
	168, 169, 170, 171, 172, 173, 344, 0, 345, 346,
	347, 348, 349, 350, 351, 352, 353, 354, 355, 335,
	336, 337, 338, 356, 357, 358, 359, 360, 361, 362,
	363, 364, 365, 366, 367, 331, 343,
}
var yyPact = []int{

	404, -1000, -1000, 183, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 35, 18, -41, -3, -12, 64, 457, 401, -1000,
	-1000, -1000, 405, -1000, 353, 286, 449, 260, 255, -1000,
	443, 439, 438, -48, -89, -18, 255, -89, -1000, -15,
	255, -1000, 288, 287, -92, 255, -92, -92, -1000, -1000,
	464, -1000, 250, 286, 332, 30, 286, 186, -1000, 209,
	-1000, 26, -1000, -1000, -1000, 255, 255, 255, 437, 255,
	47, 255, -1000, 255, 282, -1000, -58, -1000, 255, 396,
	119, 255, 255, 246, -1000, -1000, 309, 16, 129, 604,
	-1000, -1000, -1000, 538, 486, -1000, -1000, -1000, 555, 243,
	241, -1000, 240, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 555, -1000, 258, 260, 278, 435,
	260, 555, 255, -1000, -1000, 13, -1000, 255, 238, 387,
	53, -1000, -1000, 228, -1000, 276, -1000, -1000, 255, -1000,
	-1000, 435, 464, 215, -1000, -1000, 255, 101, 538, 538,
	555, 224, 408, 555, 555, 144, 555, 555, 555, 555,
	555, 555, 555, 555, 555, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 604, -62, -13, -52, 604, -1000, -1000,
	-1000, 164, 294, 464, -1000, 457, -27, 636, 400, 260,
	260, 265, -1000, 426, 538, -1000, 636, -1000, 255, -1000,
	3, -1000, 103, 255, -1000, -64, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 430, -1000, 196, 170, 305,
	289, -6, -1000, -1000, -1000, -1000, -1000, 636, -1000, 224,
	555, 555, 636, 626, -1000, 372, 89, 89, 89, 117,
	117, -1000, -1000, -1000, 285, -1000, -1000, 555, -1000, 636,
	-1000, -16, 464, -17, 38, -1000, 538, 76, 224, 183,
	122, -19, -1000, 426, 410, 423, 129, -1000, -20, -1000,
	712, -21, 347, 255, -1000, -1000, 274, -1000, 428, 420,
	215, 215, -1000, -1000, 157, 156, 167, 163, 153, -49,
	-1000, 272, -29, 269, -1000, 636, 549, 555, -1000, 636,
	-1000, -23, -1000, 0, -1000, 555, 31, -1000, 351, 195,
	-1000, -1000, -1000, 260, 410, -1000, 555, 555, -1000, 3,
	134, 232, 232, 236, 233, -1000, -1000, -1000, -1000, 232,
	232, -1000, -1000, 229, 227, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 255, 225,
	-1000, -1000, 426, 538, 555, 170, 141, -1000, 136, -1000,
	127, -1000, -1000, -1000, -1000, -24, -28, -39, -1000, -1000,
	-1000, 555, 636, -1000, -1000, 636, 555, 345, 224, -1000,
	-1000, 614, 194, -1000, 589, -1000, -1000, -9, -1000, 371,
	-1000, 317, -95, -95, 317, -1000, 317, -1000, -1000, 255,
	255, 223, 255, -1000, 410, 129, 193, 538, 222, -1000,
	-1000, 220, 217, 213, 636, 636, 454, -1000, 555, 555,
	555, -1000, -1000, -1000, -1000, 341, -1000, 335, -1000, -104,
	-1000, -1000, -1000, -1000, 192, 187, -30, -1000, -32, 255,
	-35, 361, 129, 260, 255, 255, 255, 260, 636, 636,
	-1000, -1000, -1000, -1000, 317, -109, 317, -1000, 255, -1000,
	-36, -1000, -1000, 452, 382, -37, -42, -43, -63, 186,
	-111, -1000, -1000, -1000, -1000, -1000, 255, -1000, -1000, -1000,
	-1000, -1000, 255, -1000,
}
var yyPgo = []int{

	0, 583, 582, 24, 580, 578, 577, 575, 574, 573,
	572, 568, 563, 561, 560, 436, 558, 557, 550, 27,
	35, 549, 548, 547, 546, 545, 15, 543, 542, 304,
	18, 541, 21, 34, 7, 539, 538, 537, 536, 10,
	14, 9, 535, 528, 19, 520, 16, 519, 518, 20,
	517, 516, 514, 513, 13, 511, 2, 510, 3, 509,
	508, 5, 17, 6, 79, 506, 504, 502, 501, 8,
	357, 332, 403, 500, 11, 1, 499, 496, 495, 0,
	494, 12, 492, 489, 483, 482, 477, 475, 473, 472,
	471, 470, 4, 463,
}
var yyR1 = []int{

	0, 1, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 3, 3, 4, 4, 5, 6,
	7, 8, 9, 9, 9, 9, 9, 10, 10, 10,
	10, 80, 80, 81, 81, 81, 82, 82, 82, 82,
	82, 82, 82, 82, 82, 82, 82, 82, 82, 82,
	83, 83, 83, 83, 83, 83, 84, 84, 84, 85,
	85, 86, 86, 87, 87, 88, 88, 88, 88, 89,
	89, 89, 89, 90, 90, 90, 91, 91, 91, 91,
	91, 11, 11, 11, 12, 13, 14, 14, 14, 14,
	93, 15, 16, 16, 17, 17, 17, 17, 17, 18,
	18, 19, 19, 20, 20, 20, 23, 23, 21, 21,
	21, 24, 24, 25, 25, 26, 26, 26, 26, 26,
	22, 22, 22, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 28, 28, 28, 29, 29, 30, 30, 31,
	31, 31, 31, 32, 32, 33, 33, 34, 34, 34,
	34, 34, 34, 34, 35, 35, 35, 35, 35, 35,
	35, 35, 35, 35, 36, 36, 36, 36, 36, 36,
	36, 37, 37, 42, 42, 40, 40, 44, 41, 41,
	39, 39, 39, 39, 39, 39, 39, 39, 39, 39,
	39, 39, 39, 39, 39, 39, 39, 39, 43, 43,
	45, 45, 45, 47, 50, 50, 48, 48, 49, 51,
	51, 46, 46, 38, 38, 38, 38, 38, 38, 38,
	52, 52, 53, 53, 54, 54, 55, 55, 56, 57,
	57, 57, 58, 58, 58, 58, 59, 59, 59, 60,
	60, 61, 61, 62, 62, 63, 63, 64, 70, 70,
	71, 71, 65, 65, 66, 66, 66, 66, 66, 67,
	67, 72, 72, 74, 74, 75, 77, 77, 78, 78,
	76, 76, 69, 69, 68, 68, 73, 73, 79, 92,
}
var yyR2 = []int{

	0, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 11, 3, 7, 7, 8, 7,
	3, 3, 2, 3, 4, 4, 5, 8, 8, 4,
	4, 1, 3, 4, 6, 5, 2, 3, 3, 2,
	1, 1, 1, 1, 2, 2, 1, 1, 4, 4,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 0, 1, 2, 0, 2, 1, 1,
	2, 6, 7, 4, 5, 3, 4, 5, 5, 5,
	0, 2, 0, 2, 1, 2, 1, 1, 1, 0,
	1, 1, 3, 1, 2, 3, 1, 1, 0, 1,
	2, 0, 2, 1, 3, 3, 3, 3, 5, 7,
	0, 1, 2, 1, 1, 2, 3, 2, 3, 2,
	2, 2, 1, 3, 1, 1, 3, 1, 3, 0,
	5, 5, 5, 1, 3, 0, 2, 1, 1, 1,
	3, 3, 2, 3, 3, 3, 4, 3, 4, 5,
	6, 3, 4, 2, 1, 1, 1, 1, 1, 1,
	1, 2, 1, 1, 3, 3, 1, 3, 1, 3,
	1, 1, 1, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 2, 3, 4, 5, 4, 1, 1, 1,
	1, 1, 1, 5, 0, 1, 1, 2, 4, 0,
	2, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	0, 3, 0, 2, 0, 3, 1, 3, 2, 0,
	1, 1, 0, 2, 4, 4, 0, 2, 4, 0,
	3, 1, 3, 0, 5, 1, 3, 3, 0, 2,
	0, 3, 0, 1, 1, 1, 1, 1, 1, 0,
	1, 0, 1, 0, 3, 1, 0, 5, 0, 4,
	0, 2, 0, 1, 0, 2, 0, 2, 1, 0,
}
var yyChk = []int{

	-1000, -1, -2, -3, -4, -5, -6, -7, -8, -9,
	-10, -11, -12, -13, -14, 5, 6, 7, 8, 34,
	94, 122, 117, 118, 120, 121, 119, -17, 81, 82,
	83, 84, -15, -93, -15, -15, -15, -15, -15, 124,
	126, 127, 129, 130, 125, -72, 128, 123, 134, -65,
	128, 132, 125, 125, 125, 127, 128, 123, -3, 18,
	-18, 19, -16, 30, -29, 67, 9, -63, -64, -46,
	-79, 67, -79, 67, -73, 9, 9, 9, 129, -71,
	133, 127, -79, -71, 125, -79, 67, 67, -70, 133,
	-79, -70, -70, -19, -20, 107, -23, 67, -34, -39,
	-35, 65, 66, 101, 76, -38, -46, -40, -45, -79,
	-43, -47, 21, 68, 41, 69, 70, 26, -44, 105,
	106, 80, 133, 29, 112, 71, -29, 34, 110, -29,
	85, 77, 110, -79, -30, -79, -30, 9, -30, 101,
	-79, -92, -79, 67, -92, 131, -79, 21, 96, -79,
	-79, -24, 85, 9, -21, -79, 20, 110, 98, 99,
	-36, 22, 101, 24, 25, 23, 102, 103, 104, 105,
	106, 107, 108, 109, 100, 77, 78, 79, 72, 73,
	74, 75, -34, -39, -34, -41, -3, -39, -39, 65,
	66, 76, 76, 76, -44, 76, -50, -39, -60, 34,
	76, -63, 67, -33, 10, -64, -39, -79, 110, -30,
	76, 21, -68, 97, -66, 120, 118, 33, 119, 13,
	67, 67, -79, -92, -92, -33, -20, -25, -26, -28,
	76, 67, -44, -79, 107, -34, -34, -39, -40, 22,
	24, 25, -39, -39, 26, 101, -39, -39, -39, -39,
	-39, -39, -39, -39, -39, 137, 137, 85, 137, -39,
	137, -19, 19, -19, -48, -49, 113, -37, 29, -3,
	-63, -61, -46, -33, -54, 13, -34, -79, -80, -81,
	-79, -72, 136, 96, -79, -92, -67, 131, -52, 11,
	85, -27, 86, 87, 88, 89, 90, 92, 93, -22,
	67, 20, -26, 110, -40, -39, -39, 98, 26, -39,
	137, -19, 137, -51, -49, 115, -34, -62, 96, -42,
	-40, -62, 137, 85, -54, -58, 15, 14, 137, 85,
	-82, 63, -83, -84, -85, 47, 48, 49, 50, -86,
	-87, -88, -89, 64, 34, 36, 37, 38, 39, 40,
	41, 42, 43, 44, 45, 46, 51, 52, 53, 54,
	55, 56, 57, 58, 59, 60, 61, 62, 127, 32,
	-30, 67, -53, 12, 14, -26, -26, 86, 91, 86,
	91, 86, 86, 86, -31, 94, 132, 95, 67, 137,
	67, 98, -39, 137, 116, -39, 114, 31, 85, -46,
	-58, -39, -55, -56, -39, -92, -81, -90, 26, 101,
	-74, 76, -74, -77, 76, -78, 76, -74, -74, 76,
	76, -79, 76, -92, -54, -34, -41, 96, 97, 86,
	86, 127, 127, 127, -39, -39, 32, -40, 85, 16,
	85, -57, 27, 28, -91, 136, 32, 134, 26, -75,
	41, -69, 135, -69, -75, -75, -32, -79, -32, 76,
	-32, -58, -34, 76, 76, 76, 76, 7, -39, -39,
	-56, 32, 32, 137, 85, -76, 85, 137, 85, 137,
	-32, 137, -59, 17, 35, -61, -32, -32, -32, -63,
	-75, 137, -75, -79, 137, 7, 22, 137, 137, 137,
	137, 137, -79, -79,
}
var yyDef = []int{

	0, -2, 1, 2, 3, 4, 5, 6, 7, 8,
	9, 10, 11, 12, 13, 90, 90, 90, 90, 90,
	90, 0, 261, 252, 0, 0, 0, 0, 94, 96,
	97, 98, 99, 92, 0, 0, 0, 0, 0, 22,
	276, 0, 0, 0, 250, 0, 0, 250, 262, 0,
	0, 253, 0, 0, 248, 0, 248, 248, 15, 95,
	0, 100, 91, 0, 0, 135, 0, 20, 245, 0,
	211, 278, 21, 278, 23, 0, 0, 0, 0, 0,
	0, 0, 279, 0, 0, 279, 0, 85, 0, 0,
	0, 0, 0, 111, 101, 103, 108, 278, 106, 107,
	147, -2, -2, 0, 0, 180, 181, 182, 0, 211,
	0, 197, 0, 213, 214, 215, 216, 219, 176, 200,
	201, 202, 198, 199, 204, 93, 239, 0, 0, 145,
	0, 0, 0, 277, 24, 137, 25, 0, 0, 0,
	274, 29, 30, 0, 83, 0, 86, 249, 0, 279,
	279, 145, 0, 0, 104, 109, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 164, 165, 166, 167, 168,
	169, 170, 152, 0, 0, 0, 0, 178, 192, 217,
	218, 0, 0, 0, 163, 0, 0, 205, 0, 0,
	0, 145, 136, 224, 0, 246, 247, 212, 0, 26,
	261, 251, 0, 0, 279, 259, 254, 255, 256, 257,
	258, 84, 87, 88, 89, 220, 102, 112, 113, 120,
	0, 132, 134, 110, 105, 150, 151, 154, 155, 0,
	0, 0, 157, 0, 161, 0, 183, 184, 185, 186,
	187, 188, 189, 190, 191, 153, 175, 0, 177, 178,
	193, 0, 0, 0, 209, 206, 0, 243, 0, 172,
	243, 0, 241, 224, 232, 0, 146, 138, 0, 31,
	0, 0, 0, 0, 275, 81, 0, 260, 222, 0,
	0, 0, 123, 124, 0, 0, 0, 0, 0, 139,
	121, 0, 0, 0, 156, 158, 0, 0, 162, 179,
	194, 0, 196, 0, 207, 0, 0, 16, 0, 171,
	173, 17, 240, 0, 232, 19, 0, 0, 279, 261,
	73, 263, 263, 266, 268, 40, 41, 42, 43, 263,
	263, 46, 47, 0, 0, 50, 51, 52, 53, 54,
	55, 56, 57, 58, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 0, 0,
	279, 82, 224, 0, 0, 114, 117, 125, 0, 127,
	0, 129, 130, 131, 115, 0, 0, 0, 122, 116,
	133, 0, 159, 195, 203, 210, 0, 0, 0, 242,
	18, 233, 225, 226, 229, 27, 32, 76, 74, 0,
	36, 0, 272, 272, 0, 39, 0, 44, 45, 0,
	0, 0, 0, 28, 232, 223, 221, 0, 0, 126,
	128, 0, 0, 0, 160, 208, 0, 174, 0, 0,
	0, 228, 230, 231, 33, 0, 78, 79, 75, 0,
	265, 37, 273, 38, 0, 270, 0, 143, 0, 0,
	0, 236, 118, 0, 0, 0, 0, 0, 234, 235,
	227, 77, 80, 264, 0, 0, 0, 48, 0, 49,
	0, 35, 14, 0, 0, 0, 0, 0, 0, 244,
	0, 269, 271, 144, 34, 237, 0, 119, 140, 141,
	142, 267, 0, 238,
}
var yyTok1 = []int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 109, 102, 3,
	76, 137, 107, 105, 85, 106, 110, 108, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	78, 77, 79, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 104, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 103, 3, 80,
}
var yyTok2 = []int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 81, 82, 83, 84, 86, 87,
	88, 89, 90, 91, 92, 93, 94, 95, 96, 97,
	98, 99, 100, 101, 111, 112, 113, 114, 115, 116,
	117, 118, 119, 120, 121, 122, 123, 124, 125, 126,
	127, 128, 129, 130, 131, 132, 133, 134, 135, 136,
}
var yyTok3 = []int{
	0,
}

//line yaccpar:1

/*	parser for yacc output	*/

var yyDebug = 0

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

const yyFlag = -1000

func yyTokname(c int) string {
	// 4 is TOKSTART above
	if c >= 4 && c-4 < len(yyToknames) {
		if yyToknames[c-4] != "" {
			return yyToknames[c-4]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yylex1(lex yyLexer, lval *yySymType) int {
	c := 0
	char := lex.Lex(lval)
	if char <= 0 {
		c = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		c = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			c = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		c = yyTok3[i+0]
		if c == char {
			c = yyTok3[i+1]
			goto out
		}
	}

out:
	if c == 0 {
		c = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(c), uint(char))
	}
	return c
}

func yyParse(yylex yyLexer) int {
	var yyn int
	var yylval yySymType
	var yyVAL yySymType
	yyS := make([]yySymType, yyMaxDepth)

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yychar := -1
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yychar), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yychar < 0 {
		yychar = yylex1(yylex, &yylval)
	}
	yyn += yychar
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yychar { /* valid shift */
		yychar = -1
		yyVAL = yylval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yychar < 0 {
			yychar = yylex1(yylex, &yylval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yychar {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error("syntax error")
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yychar))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yychar))
			}
			if yychar == yyEofCode {
				goto ret1
			}
			yychar = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		//line sql.y:173
		{
			setParseTree(yylex, yyS[yypt-0].statement)
		}
	case 2:
		//line sql.y:179
		{
			yyVAL.statement = yyS[yypt-0].selStmt
		}
	case 3:
		yyVAL.statement = yyS[yypt-0].statement
	case 4:
		yyVAL.statement = yyS[yypt-0].statement
	case 5:
		yyVAL.statement = yyS[yypt-0].statement
	case 6:
		yyVAL.statement = yyS[yypt-0].statement
	case 7:
		yyVAL.statement = yyS[yypt-0].statement
	case 8:
		yyVAL.statement = yyS[yypt-0].statement
	case 9:
		yyVAL.statement = yyS[yypt-0].statement
	case 10:
		yyVAL.statement = yyS[yypt-0].statement
	case 11:
		yyVAL.statement = yyS[yypt-0].statement
	case 12:
		yyVAL.statement = yyS[yypt-0].statement
	case 13:
		yyVAL.statement = yyS[yypt-0].statement
	case 14:
		//line sql.y:196
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyS[yypt-9].str2), Distinct: yyS[yypt-8].str, Exprs: yyS[yypt-7].selectExprs, From: yyS[yypt-6].tableExprs, Where: NewWhere(astWhere, yyS[yypt-5].boolExpr), GroupBy: GroupBy(yyS[yypt-4].valExprs), Having: NewWhere(astHaving, yyS[yypt-3].boolExpr), OrderBy: yyS[yypt-2].orderBy, Limit: yyS[yypt-1].limit, Lock: yyS[yypt-0].str}
		}
	case 15:
		//line sql.y:200
		{
			yyVAL.selStmt = &Union{Type: yyS[yypt-1].str, Left: yyS[yypt-2].selStmt, Right: yyS[yypt-0].selStmt}
		}
	case 16:
		//line sql.y:206
		{
			yyVAL.statement = &Insert{Comments: Comments(yyS[yypt-5].str2), Table: yyS[yypt-3].tableName, Columns: yyS[yypt-2].columns, Rows: yyS[yypt-1].insRows, OnDup: OnDup(yyS[yypt-0].updateExprs)}
		}
	case 17:
		//line sql.y:210
		{
			cols := make(Columns, 0, len(yyS[yypt-1].updateExprs))
			vals := make(ValTuple, 0, len(yyS[yypt-1].updateExprs))
			for _, col := range yyS[yypt-1].updateExprs {
				cols = append(cols, &NonStarExpr{Expr: col.Name})
				vals = append(vals, col.Expr)
			}
			yyVAL.statement = &Insert{Comments: Comments(yyS[yypt-5].str2), Table: yyS[yypt-3].tableName, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyS[yypt-0].updateExprs)}
		}
	case 18:
		//line sql.y:222
		{
			yyVAL.statement = &Update{Comments: Comments(yyS[yypt-6].str2), Table: yyS[yypt-5].tableName, Exprs: yyS[yypt-3].updateExprs, Where: NewWhere(astWhere, yyS[yypt-2].boolExpr), OrderBy: yyS[yypt-1].orderBy, Limit: yyS[yypt-0].limit}
		}
	case 19:
		//line sql.y:228
		{
			yyVAL.statement = &Delete{Comments: Comments(yyS[yypt-5].str2), Table: yyS[yypt-3].tableName, Where: NewWhere(astWhere, yyS[yypt-2].boolExpr), OrderBy: yyS[yypt-1].orderBy, Limit: yyS[yypt-0].limit}
		}
	case 20:
		//line sql.y:234
		{
			yyVAL.statement = &Set{Comments: Comments(yyS[yypt-1].str2), Exprs: yyS[yypt-0].updateExprs}
		}
	case 21:
		//line sql.y:240
		{
			yyVAL.statement = &Use{Comments: Comments(yyS[yypt-1].str2), Name: yyS[yypt-0].str}
		}
	case 22:
		//line sql.y:246
		{
			yyVAL.statement = &ShowDatabases{}
		}
	case 23:
		//line sql.y:250
		{
			yyVAL.statement = &ShowTables{Name: yyS[yypt-0].str}
		}
	case 24:
		//line sql.y:254
		{
			yyVAL.statement = &ShowIndex{Table: yyS[yypt-0].tableName}
		}
	case 25:
		//line sql.y:258
		{
			yyVAL.statement = &ShowColumns{Table: yyS[yypt-0].tableName}
		}
	case 26:
		//line sql.y:262
		{
			yyVAL.statement = &ShowColumns{Table: yyS[yypt-0].tableName, Full: true}
		}
	case 27:
		//line sql.y:268
		{
			yyVAL.statement = &CreateTable{IfNotExists: yyS[yypt-5].boolVal, Table: yyS[yypt-4].tableName, Defs: yyS[yypt-2].tableDefs}
		}
	case 28:
		//line sql.y:272
		{
			yyVAL.statement = &CreateIndex{Name: yyS[yypt-4].str, Table: yyS[yypt-1].tableName, Unique: yyS[yypt-6].boolVal}
		}
	case 29:
		//line sql.y:276
		{
			yyVAL.statement = &CreateView{Name: yyS[yypt-1].str}
		}
	case 30:
		//line sql.y:280
		{
			yyVAL.statement = &CreateDatabase{IfNotExists: yyS[yypt-1].boolVal, Name: yyS[yypt-0].str}
		}
	case 31:
		//line sql.y:286
		{
			yyVAL.tableDefs = TableDefs{yyS[yypt-0].tableDef}
		}
	case 32:
		//line sql.y:290
		{
			yyVAL.tableDefs = append(yyVAL.tableDefs, yyS[yypt-0].tableDef)
		}
	case 33:
		//line sql.y:296
		{
			yyVAL.tableDef = &ColumnTableDef{Name: yyS[yypt-3].str, Type: yyS[yypt-2].columnType, Nullable: Nullability(yyS[yypt-1].intVal), PrimaryKey: yyS[yypt-0].intVal == 1, Unique: yyS[yypt-0].intVal == 2}
		}
	case 34:
		//line sql.y:300
		{
			yyVAL.tableDef = &IndexTableDef{Name: yyS[yypt-3].str, Unique: yyS[yypt-5].boolVal, Columns: yyS[yypt-1].str2}
		}
	case 35:
		//line sql.y:304
		{
			yyVAL.tableDef = &IndexTableDef{Name: "primary", PrimaryKey: true, Unique: true, Columns: yyS[yypt-1].str2}
		}
	case 36:
		//line sql.y:310
		{
			yyVAL.columnType = &BitType{N: yyS[yypt-0].intVal}
		}
	case 37:
		//line sql.y:312
		{
			yyVAL.columnType = &IntType{Name: yyS[yypt-2].str, N: yyS[yypt-1].intVal, Unsigned: yyS[yypt-0].boolVal}
		}
	case 38:
		//line sql.y:314
		{
			yyVAL.columnType = &FloatType{Name: yyS[yypt-2].str, N: yyS[yypt-1].intVal2[0], Prec: yyS[yypt-1].intVal2[1], Unsigned: yyS[yypt-0].boolVal}
		}
	case 39:
		//line sql.y:316
		{
			yyVAL.columnType = &DecimalType{Name: yyS[yypt-1].str, N: yyS[yypt-0].intVal2[0], Prec: yyS[yypt-0].intVal2[1]}
		}
	case 40:
		//line sql.y:318
		{
			yyVAL.columnType = &DateType{}
		}
	case 41:
		//line sql.y:320
		{
			yyVAL.columnType = &TimeType{}
		}
	case 42:
		//line sql.y:322
		{
			yyVAL.columnType = &DateTimeType{}
		}
	case 43:
		//line sql.y:324
		{
			yyVAL.columnType = &TimestampType{}
		}
	case 44:
		//line sql.y:326
		{
			yyVAL.columnType = &CharType{Name: yyS[yypt-1].str, N: yyS[yypt-0].intVal}
		}
	case 45:
		//line sql.y:328
		{
			yyVAL.columnType = &BinaryType{Name: yyS[yypt-1].str, N: yyS[yypt-0].intVal}
		}
	case 46:
		//line sql.y:330
		{
			yyVAL.columnType = &TextType{Name: yyS[yypt-0].str}
		}
	case 47:
		//line sql.y:332
		{
			yyVAL.columnType = &BlobType{Name: yyS[yypt-0].str}
		}
	case 48:
		//line sql.y:334
		{
			yyVAL.columnType = &EnumType{Vals: yyS[yypt-1].str2}
		}
	case 49:
		//line sql.y:336
		{
			yyVAL.columnType = &SetType{Vals: yyS[yypt-1].str2}
		}
	case 50:
		//line sql.y:340
		{
			yyVAL.str = astInt
		}
	case 51:
		//line sql.y:342
		{
			yyVAL.str = astTinyInt
		}
	case 52:
		//line sql.y:344
		{
			yyVAL.str = astSmallInt
		}
	case 53:
		//line sql.y:346
		{
			yyVAL.str = astMediumInt
		}
	case 54:
		//line sql.y:348
		{
			yyVAL.str = astBigInt
		}
	case 55:
		//line sql.y:350
		{
			yyVAL.str = astInteger
		}
	case 56:
		//line sql.y:354
		{
			yyVAL.str = astReal
		}
	case 57:
		//line sql.y:356
		{
			yyVAL.str = astDouble
		}
	case 58:
		//line sql.y:358
		{
			yyVAL.str = astFloat
		}
	case 59:
		//line sql.y:362
		{
			yyVAL.str = astDecimal
		}
	case 60:
		//line sql.y:364
		{
			yyVAL.str = astNumeric
		}
	case 61:
		//line sql.y:368
		{
			yyVAL.str = astChar
		}
	case 62:
		//line sql.y:370
		{
			yyVAL.str = astVarChar
		}
	case 63:
		//line sql.y:374
		{
			yyVAL.str = astBinary
		}
	case 64:
		//line sql.y:376
		{
			yyVAL.str = astVarBinary
		}
	case 65:
		//line sql.y:380
		{
			yyVAL.str = astText
		}
	case 66:
		//line sql.y:382
		{
			yyVAL.str = astTinyText
		}
	case 67:
		//line sql.y:384
		{
			yyVAL.str = astMediumText
		}
	case 68:
		//line sql.y:386
		{
			yyVAL.str = astLongText
		}
	case 69:
		//line sql.y:390
		{
			yyVAL.str = astBlob
		}
	case 70:
		//line sql.y:392
		{
			yyVAL.str = astTinyBlob
		}
	case 71:
		//line sql.y:394
		{
			yyVAL.str = astMediumBlob
		}
	case 72:
		//line sql.y:396
		{
			yyVAL.str = astLongBlob
		}
	case 73:
		//line sql.y:399
		{
			yyVAL.intVal = int(SilentNull)
		}
	case 74:
		//line sql.y:401
		{
			yyVAL.intVal = int(Null)
		}
	case 75:
		//line sql.y:403
		{
			yyVAL.intVal = int(NotNull)
		}
	case 76:
		//line sql.y:406
		{
			yyVAL.intVal = 0
		}
	case 77:
		//line sql.y:408
		{
			yyVAL.intVal = 1
		}
	case 78:
		//line sql.y:410
		{
			yyVAL.intVal = 1
		}
	case 79:
		//line sql.y:412
		{
			yyVAL.intVal = 2
		}
	case 80:
		//line sql.y:414
		{
			yyVAL.intVal = 2
		}
	case 81:
		//line sql.y:418
		{
			yyVAL.statement = &AlterTable{Name: yyS[yypt-2].str}
		}
	case 82:
		//line sql.y:422
		{
			// Change this to a rename statement
			yyVAL.statement = &RenameTable{Name: yyS[yypt-3].str, NewName: yyS[yypt-0].str}
		}
	case 83:
		//line sql.y:427
		{
			yyVAL.statement = &AlterView{Name: yyS[yypt-1].str}
		}
	case 84:
		//line sql.y:433
		{
			yyVAL.statement = &RenameTable{Name: yyS[yypt-2].str, NewName: yyS[yypt-0].str}
		}
	case 85:
		//line sql.y:439
		{
			yyVAL.statement = &TruncateTable{Name: yyS[yypt-0].str}
		}
	case 86:
		//line sql.y:445
		{
			yyVAL.statement = &DropTable{Name: yyS[yypt-0].str, IfExists: yyS[yypt-1].boolVal}
		}
	case 87:
		//line sql.y:449
		{
			yyVAL.statement = &DropIndex{Name: yyS[yypt-2].str, TableName: yyS[yypt-0].str}
		}
	case 88:
		//line sql.y:453
		{
			yyVAL.statement = &DropView{Name: yyS[yypt-1].str, IfExists: yyS[yypt-2].boolVal}
		}
	case 89:
		//line sql.y:457
		{
			yyVAL.statement = &DropDatabase{Name: yyS[yypt-1].str, IfExists: yyS[yypt-2].boolVal}
		}
	case 90:
		//line sql.y:462
		{
			setAllowComments(yylex, true)
		}
	case 91:
		//line sql.y:466
		{
			yyVAL.str2 = yyS[yypt-0].str2
			setAllowComments(yylex, false)
		}
	case 92:
		//line sql.y:472
		{
			yyVAL.str2 = nil
		}
	case 93:
		//line sql.y:476
		{
			yyVAL.str2 = append(yyS[yypt-1].str2, yyS[yypt-0].str)
		}
	case 94:
		//line sql.y:482
		{
			yyVAL.str = astUnion
		}
	case 95:
		//line sql.y:486
		{
			yyVAL.str = astUnionAll
		}
	case 96:
		//line sql.y:490
		{
			yyVAL.str = astSetMinus
		}
	case 97:
		//line sql.y:494
		{
			yyVAL.str = astExcept
		}
	case 98:
		//line sql.y:498
		{
			yyVAL.str = astIntersect
		}
	case 99:
		//line sql.y:503
		{
			yyVAL.str = ""
		}
	case 100:
		//line sql.y:507
		{
			yyVAL.str = astDistinct
		}
	case 101:
		//line sql.y:513
		{
			yyVAL.selectExprs = SelectExprs{yyS[yypt-0].selectExpr}
		}
	case 102:
		//line sql.y:517
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyS[yypt-0].selectExpr)
		}
	case 103:
		//line sql.y:523
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 104:
		//line sql.y:527
		{
			yyVAL.selectExpr = &NonStarExpr{Expr: yyS[yypt-1].expr, As: yyS[yypt-0].str}
		}
	case 105:
		//line sql.y:531
		{
			yyVAL.selectExpr = &StarExpr{TableName: yyS[yypt-2].str}
		}
	case 106:
		//line sql.y:537
		{
			yyVAL.expr = yyS[yypt-0].boolExpr
		}
	case 107:
		//line sql.y:541
		{
			yyVAL.expr = yyS[yypt-0].valExpr
		}
	case 108:
		//line sql.y:546
		{
			yyVAL.str = ""
		}
	case 109:
		//line sql.y:550
		{
			yyVAL.str = yyS[yypt-0].str
		}
	case 110:
		//line sql.y:554
		{
			yyVAL.str = yyS[yypt-0].str
		}
	case 111:
		//line sql.y:559
		{
			yyVAL.tableExprs = nil
		}
	case 112:
		//line sql.y:563
		{
			yyVAL.tableExprs = yyS[yypt-0].tableExprs
		}
	case 113:
		//line sql.y:569
		{
			yyVAL.tableExprs = TableExprs{yyS[yypt-0].tableExpr}
		}
	case 114:
		//line sql.y:573
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyS[yypt-0].tableExpr)
		}
	case 115:
		//line sql.y:579
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyS[yypt-2].smTableExpr, As: yyS[yypt-1].str, Hints: yyS[yypt-0].indexHints}
		}
	case 116:
		//line sql.y:583
		{
			yyVAL.tableExpr = &ParenTableExpr{Expr: yyS[yypt-1].tableExpr}
		}
	case 117:
		//line sql.y:587
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyS[yypt-2].tableExpr, Join: yyS[yypt-1].str, RightExpr: yyS[yypt-0].tableExpr}
		}
	case 118:
		//line sql.y:591
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyS[yypt-4].tableExpr, Join: yyS[yypt-3].str, RightExpr: yyS[yypt-2].tableExpr, Cond: &OnJoinCond{yyS[yypt-0].boolExpr}}
		}
	case 119:
		//line sql.y:595
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyS[yypt-6].tableExpr, Join: yyS[yypt-5].str, RightExpr: yyS[yypt-4].tableExpr, Cond: &UsingJoinCond{yyS[yypt-1].columns}}
		}
	case 120:
		//line sql.y:600
		{
			yyVAL.str = ""
		}
	case 121:
		//line sql.y:604
		{
			yyVAL.str = yyS[yypt-0].str
		}
	case 122:
		//line sql.y:608
		{
			yyVAL.str = yyS[yypt-0].str
		}
	case 123:
		//line sql.y:614
		{
			yyVAL.str = astJoin
		}
	case 124:
		//line sql.y:618
		{
			yyVAL.str = astStraightJoin
		}
	case 125:
		//line sql.y:622
		{
			yyVAL.str = astLeftJoin
		}
	case 126:
		//line sql.y:626
		{
			yyVAL.str = astLeftJoin
		}
	case 127:
		//line sql.y:630
		{
			yyVAL.str = astRightJoin
		}
	case 128:
		//line sql.y:634
		{
			yyVAL.str = astRightJoin
		}
	case 129:
		//line sql.y:638
		{
			yyVAL.str = astJoin
		}
	case 130:
		//line sql.y:642
		{
			yyVAL.str = astCrossJoin
		}
	case 131:
		//line sql.y:646
		{
			yyVAL.str = astNaturalJoin
		}
	case 132:
		//line sql.y:652
		{
			yyVAL.smTableExpr = &TableName{Name: yyS[yypt-0].str}
		}
	case 133:
		//line sql.y:656
		{
			yyVAL.smTableExpr = &TableName{Qualifier: yyS[yypt-2].str, Name: yyS[yypt-0].str}
		}
	case 134:
		//line sql.y:660
		{
			yyVAL.smTableExpr = yyS[yypt-0].subquery
		}
	case 135:
		//line sql.y:666
		{
			yyVAL.tableName = &TableName{Name: yyS[yypt-0].str}
		}
	case 136:
		//line sql.y:670
		{
			yyVAL.tableName = &TableName{Qualifier: yyS[yypt-2].str, Name: yyS[yypt-0].str}
		}
	case 137:
		//line sql.y:676
		{
			yyVAL.tableName = &TableName{Name: yyS[yypt-0].str}
		}
	case 138:
		//line sql.y:680
		{
			yyVAL.tableName = &TableName{Qualifier: yyS[yypt-2].str, Name: yyS[yypt-0].str}
		}
	case 139:
		//line sql.y:685
		{
			yyVAL.indexHints = nil
		}
	case 140:
		//line sql.y:689
		{
			yyVAL.indexHints = &IndexHints{Type: astUse, Indexes: yyS[yypt-1].str2}
		}
	case 141:
		//line sql.y:693
		{
			yyVAL.indexHints = &IndexHints{Type: astIgnore, Indexes: yyS[yypt-1].str2}
		}
	case 142:
		//line sql.y:697
		{
			yyVAL.indexHints = &IndexHints{Type: astForce, Indexes: yyS[yypt-1].str2}
		}
	case 143:
		//line sql.y:703
		{
			yyVAL.str2 = []string{yyS[yypt-0].str}
		}
	case 144:
		//line sql.y:707
		{
			yyVAL.str2 = append(yyS[yypt-2].str2, yyS[yypt-0].str)
		}
	case 145:
		//line sql.y:712
		{
			yyVAL.boolExpr = nil
		}
	case 146:
		//line sql.y:716
		{
			yyVAL.boolExpr = yyS[yypt-0].boolExpr
		}
	case 147:
		yyVAL.boolExpr = yyS[yypt-0].boolExpr
	case 148:
		//line sql.y:728
		{
			yyVAL.boolExpr = BoolVal(true)
		}
	case 149:
		//line sql.y:732
		{
			yyVAL.boolExpr = BoolVal(false)
		}
	case 150:
		//line sql.y:736
		{
			yyVAL.boolExpr = &AndExpr{Op: string(yyS[yypt-1].str), Left: yyS[yypt-2].boolExpr, Right: yyS[yypt-0].boolExpr}
		}
	case 151:
		//line sql.y:740
		{
			yyVAL.boolExpr = &OrExpr{Op: string(yyS[yypt-1].str), Left: yyS[yypt-2].boolExpr, Right: yyS[yypt-0].boolExpr}
		}
	case 152:
		//line sql.y:744
		{
			yyVAL.boolExpr = &NotExpr{Op: string(yyS[yypt-1].str), Expr: yyS[yypt-0].boolExpr}
		}
	case 153:
		//line sql.y:748
		{
			yyVAL.boolExpr = &ParenBoolExpr{Expr: yyS[yypt-1].boolExpr}
		}
	case 154:
		//line sql.y:754
		{
			yyVAL.boolExpr = &ComparisonExpr{Left: yyS[yypt-2].valExpr, Operator: ComparisonOp(yyS[yypt-1].intVal), Right: yyS[yypt-0].valExpr}
		}
	case 155:
		//line sql.y:758
		{
			yyVAL.boolExpr = &ComparisonExpr{Left: yyS[yypt-2].valExpr, Operator: In, Right: yyS[yypt-0].tuple}
		}
	case 156:
		//line sql.y:762
		{
			yyVAL.boolExpr = &ComparisonExpr{Left: yyS[yypt-3].valExpr, Operator: NotIn, Right: yyS[yypt-0].tuple}
		}
	case 157:
		//line sql.y:766
		{
			yyVAL.boolExpr = &ComparisonExpr{Left: yyS[yypt-2].valExpr, Operator: Like, Right: yyS[yypt-0].valExpr}
		}
	case 158:
		//line sql.y:770
		{
			yyVAL.boolExpr = &ComparisonExpr{Left: yyS[yypt-3].valExpr, Operator: NotLike, Right: yyS[yypt-0].valExpr}
		}
	case 159:
		//line sql.y:774
		{
			yyVAL.boolExpr = &RangeCond{Not: false, Left: yyS[yypt-4].valExpr, From: yyS[yypt-2].valExpr, To: yyS[yypt-0].valExpr}
		}
	case 160:
		//line sql.y:778
		{
			yyVAL.boolExpr = &RangeCond{Not: true, Left: yyS[yypt-5].valExpr, From: yyS[yypt-2].valExpr, To: yyS[yypt-0].valExpr}
		}
	case 161:
		//line sql.y:782
		{
			yyVAL.boolExpr = &NullCheck{Not: false, Expr: yyS[yypt-2].valExpr}
		}
	case 162:
		//line sql.y:786
		{
			yyVAL.boolExpr = &NullCheck{Not: true, Expr: yyS[yypt-3].valExpr}
		}
	case 163:
		//line sql.y:790
		{
			yyVAL.boolExpr = &ExistsExpr{Subquery: yyS[yypt-0].subquery}
		}
	case 164:
		//line sql.y:796
		{
			yyVAL.intVal = int(EQ)
		}
	case 165:
		//line sql.y:800
		{
			yyVAL.intVal = int(LT)
		}
	case 166:
		//line sql.y:804
		{
			yyVAL.intVal = int(GT)
		}
	case 167:
		//line sql.y:808
		{
			yyVAL.intVal = int(LE)
		}
	case 168:
		//line sql.y:812
		{
			yyVAL.intVal = int(GE)
		}
	case 169:
		//line sql.y:816
		{
			yyVAL.intVal = int(NE)
		}
	case 170:
		//line sql.y:820
		{
			yyVAL.intVal = int(NullSafeEqual)
		}
	case 171:
		//line sql.y:826
		{
			yyVAL.insRows = yyS[yypt-0].values
		}
	case 172:
		//line sql.y:830
		{
			yyVAL.insRows = yyS[yypt-0].selStmt
		}
	case 173:
		//line sql.y:836
		{
			yyVAL.values = Values{yyS[yypt-0].tuple}
		}
	case 174:
		//line sql.y:840
		{
			yyVAL.values = append(yyS[yypt-2].values, yyS[yypt-0].tuple)
		}
	case 175:
		//line sql.y:846
		{
			yyVAL.tuple = ValTuple(yyS[yypt-1].valExprs)
		}
	case 176:
		//line sql.y:850
		{
			yyVAL.tuple = yyS[yypt-0].subquery
		}
	case 177:
		//line sql.y:856
		{
			yyVAL.subquery = &Subquery{yyS[yypt-1].selStmt}
		}
	case 178:
		//line sql.y:862
		{
			yyVAL.valExprs = ValExprs{yyS[yypt-0].valExpr}
		}
	case 179:
		//line sql.y:866
		{
			yyVAL.valExprs = append(yyS[yypt-2].valExprs, yyS[yypt-0].valExpr)
		}
	case 180:
		//line sql.y:872
		{
			yyVAL.valExpr = yyS[yypt-0].valExpr
		}
	case 181:
		//line sql.y:876
		{
			yyVAL.valExpr = yyS[yypt-0].colName
		}
	case 182:
		//line sql.y:880
		{
			yyVAL.valExpr = yyS[yypt-0].tuple
		}
	case 183:
		//line sql.y:884
		{
			yyVAL.valExpr = &BinaryExpr{Left: yyS[yypt-2].valExpr, Operator: Bitand, Right: yyS[yypt-0].valExpr}
		}
	case 184:
		//line sql.y:888
		{
			yyVAL.valExpr = &BinaryExpr{Left: yyS[yypt-2].valExpr, Operator: Bitor, Right: yyS[yypt-0].valExpr}
		}
	case 185:
		//line sql.y:892
		{
			yyVAL.valExpr = &BinaryExpr{Left: yyS[yypt-2].valExpr, Operator: Bitxor, Right: yyS[yypt-0].valExpr}
		}
	case 186:
		//line sql.y:896
		{
			yyVAL.valExpr = &BinaryExpr{Left: yyS[yypt-2].valExpr, Operator: Plus, Right: yyS[yypt-0].valExpr}
		}
	case 187:
		//line sql.y:900
		{
			yyVAL.valExpr = &BinaryExpr{Left: yyS[yypt-2].valExpr, Operator: Minus, Right: yyS[yypt-0].valExpr}
		}
	case 188:
		//line sql.y:904
		{
			yyVAL.valExpr = &BinaryExpr{Left: yyS[yypt-2].valExpr, Operator: Mult, Right: yyS[yypt-0].valExpr}
		}
	case 189:
		//line sql.y:908
		{
			yyVAL.valExpr = &BinaryExpr{Left: yyS[yypt-2].valExpr, Operator: Div, Right: yyS[yypt-0].valExpr}
		}
	case 190:
		//line sql.y:912
		{
			yyVAL.valExpr = &BinaryExpr{Left: yyS[yypt-2].valExpr, Operator: Mod, Right: yyS[yypt-0].valExpr}
		}
	case 191:
		//line sql.y:916
		{
			yyVAL.valExpr = &BinaryExpr{Left: yyS[yypt-2].valExpr, Operator: Concat, Right: yyS[yypt-0].valExpr}
		}
	case 192:
		//line sql.y:920
		{
			yyVAL.valExpr = &UnaryExpr{Operator: UnaryOp(yyS[yypt-1].intVal), Expr: yyS[yypt-0].valExpr}
		}
	case 193:
		//line sql.y:924
		{
			yyVAL.valExpr = &FuncExpr{Name: strings.ToUpper(yyS[yypt-2].str)}
		}
	case 194:
		//line sql.y:928
		{
			yyVAL.valExpr = &FuncExpr{Name: strings.ToUpper(yyS[yypt-3].str), Exprs: yyS[yypt-1].selectExprs}
		}
	case 195:
		//line sql.y:932
		{
			yyVAL.valExpr = &FuncExpr{Name: strings.ToUpper(yyS[yypt-4].str), Distinct: true, Exprs: yyS[yypt-1].selectExprs}
		}
	case 196:
		//line sql.y:936
		{
			yyVAL.valExpr = &FuncExpr{Name: strings.ToUpper(yyS[yypt-3].str), Exprs: yyS[yypt-1].selectExprs}
		}
	case 197:
		//line sql.y:940
		{
			yyVAL.valExpr = yyS[yypt-0].caseExpr
		}
	case 198:
		//line sql.y:946
		{
			yyVAL.str = "IF"
		}
	case 199:
		//line sql.y:950
		{
			yyVAL.str = "VALUES"
		}
	case 200:
		//line sql.y:956
		{
			yyVAL.intVal = int(UnaryPlus)
		}
	case 201:
		//line sql.y:960
		{
			yyVAL.intVal = int(UnaryMinus)
		}
	case 202:
		//line sql.y:964
		{
			yyVAL.intVal = int(UnaryComplement)
		}
	case 203:
		//line sql.y:970
		{
			yyVAL.caseExpr = &CaseExpr{Expr: yyS[yypt-3].valExpr, Whens: yyS[yypt-2].whens, Else: yyS[yypt-1].valExpr}
		}
	case 204:
		//line sql.y:975
		{
			yyVAL.valExpr = nil
		}
	case 205:
		//line sql.y:979
		{
			yyVAL.valExpr = yyS[yypt-0].valExpr
		}
	case 206:
		//line sql.y:985
		{
			yyVAL.whens = []*When{yyS[yypt-0].when}
		}
	case 207:
		//line sql.y:989
		{
			yyVAL.whens = append(yyS[yypt-1].whens, yyS[yypt-0].when)
		}
	case 208:
		//line sql.y:995
		{
			yyVAL.when = &When{Cond: yyS[yypt-2].boolExpr, Val: yyS[yypt-0].valExpr}
		}
	case 209:
		//line sql.y:1000
		{
			yyVAL.valExpr = nil
		}
	case 210:
		//line sql.y:1004
		{
			yyVAL.valExpr = yyS[yypt-0].valExpr
		}
	case 211:
		//line sql.y:1010
		{
			yyVAL.colName = &ColName{Name: yyS[yypt-0].str}
		}
	case 212:
		//line sql.y:1014
		{
			yyVAL.colName = &ColName{Qualifier: yyS[yypt-2].str, Name: yyS[yypt-0].str}
		}
	case 213:
		//line sql.y:1020
		{
			yyVAL.valExpr = StrVal(yyS[yypt-0].str)
		}
	case 214:
		//line sql.y:1024
		{
			yyVAL.valExpr = IntVal(yyS[yypt-0].str)
		}
	case 215:
		//line sql.y:1028
		{
			yyVAL.valExpr = NumVal(yyS[yypt-0].str)
		}
	case 216:
		//line sql.y:1032
		{
			yyVAL.valExpr = ValArg(yyS[yypt-0].str)
		}
	case 217:
		//line sql.y:1036
		{
			yyVAL.valExpr = BoolVal(true)
		}
	case 218:
		//line sql.y:1040
		{
			yyVAL.valExpr = BoolVal(false)
		}
	case 219:
		//line sql.y:1044
		{
			yyVAL.valExpr = &NullVal{}
		}
	case 220:
		//line sql.y:1049
		{
			yyVAL.valExprs = nil
		}
	case 221:
		//line sql.y:1053
		{
			yyVAL.valExprs = yyS[yypt-0].valExprs
		}
	case 222:
		//line sql.y:1058
		{
			yyVAL.boolExpr = nil
		}
	case 223:
		//line sql.y:1062
		{
			yyVAL.boolExpr = yyS[yypt-0].boolExpr
		}
	case 224:
		//line sql.y:1067
		{
			yyVAL.orderBy = nil
		}
	case 225:
		//line sql.y:1071
		{
			yyVAL.orderBy = yyS[yypt-0].orderBy
		}
	case 226:
		//line sql.y:1077
		{
			yyVAL.orderBy = OrderBy{yyS[yypt-0].order}
		}
	case 227:
		//line sql.y:1081
		{
			yyVAL.orderBy = append(yyS[yypt-2].orderBy, yyS[yypt-0].order)
		}
	case 228:
		//line sql.y:1087
		{
			yyVAL.order = &Order{Expr: yyS[yypt-1].valExpr, Direction: yyS[yypt-0].str}
		}
	case 229:
		//line sql.y:1092
		{
			yyVAL.str = astAsc
		}
	case 230:
		//line sql.y:1096
		{
			yyVAL.str = astAsc
		}
	case 231:
		//line sql.y:1100
		{
			yyVAL.str = astDesc
		}
	case 232:
		//line sql.y:1105
		{
			yyVAL.limit = nil
		}
	case 233:
		//line sql.y:1109
		{
			yyVAL.limit = &Limit{Rowcount: yyS[yypt-0].valExpr}
		}
	case 234:
		//line sql.y:1113
		{
			yyVAL.limit = &Limit{Offset: yyS[yypt-2].valExpr, Rowcount: yyS[yypt-0].valExpr}
		}
	case 235:
		//line sql.y:1117
		{
			yyVAL.limit = &Limit{Offset: yyS[yypt-0].valExpr, Rowcount: yyS[yypt-2].valExpr}
		}
	case 236:
		//line sql.y:1122
		{
			yyVAL.str = ""
		}
	case 237:
		//line sql.y:1126
		{
			yyVAL.str = astForUpdate
		}
	case 238:
		//line sql.y:1130
		{
			if yyS[yypt-1].str != "share" {
				yylex.Error("expecting share")
				return 1
			}
			if yyS[yypt-0].str != "mode" {
				yylex.Error("expecting mode")
				return 1
			}
			yyVAL.str = astShareMode
		}
	case 239:
		//line sql.y:1143
		{
			yyVAL.columns = nil
		}
	case 240:
		//line sql.y:1147
		{
			yyVAL.columns = yyS[yypt-1].columns
		}
	case 241:
		//line sql.y:1153
		{
			yyVAL.columns = Columns{&NonStarExpr{Expr: yyS[yypt-0].colName}}
		}
	case 242:
		//line sql.y:1157
		{
			yyVAL.columns = append(yyVAL.columns, &NonStarExpr{Expr: yyS[yypt-0].colName})
		}
	case 243:
		//line sql.y:1162
		{
			yyVAL.updateExprs = nil
		}
	case 244:
		//line sql.y:1166
		{
			yyVAL.updateExprs = yyS[yypt-0].updateExprs
		}
	case 245:
		//line sql.y:1172
		{
			yyVAL.updateExprs = UpdateExprs{yyS[yypt-0].updateExpr}
		}
	case 246:
		//line sql.y:1176
		{
			yyVAL.updateExprs = append(yyS[yypt-2].updateExprs, yyS[yypt-0].updateExpr)
		}
	case 247:
		//line sql.y:1182
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyS[yypt-2].colName, Expr: yyS[yypt-0].valExpr}
		}
	case 248:
		//line sql.y:1187
		{
			yyVAL.boolVal = false
		}
	case 249:
		//line sql.y:1189
		{
			yyVAL.boolVal = true
		}
	case 250:
		//line sql.y:1192
		{
			yyVAL.boolVal = false
		}
	case 251:
		//line sql.y:1194
		{
			yyVAL.boolVal = true
		}
	case 252:
		//line sql.y:1197
		{
			yyVAL.empty = struct{}{}
		}
	case 253:
		//line sql.y:1199
		{
			yyVAL.empty = struct{}{}
		}
	case 254:
		//line sql.y:1203
		{
			yyVAL.empty = struct{}{}
		}
	case 255:
		//line sql.y:1205
		{
			yyVAL.empty = struct{}{}
		}
	case 256:
		//line sql.y:1207
		{
			yyVAL.empty = struct{}{}
		}
	case 257:
		//line sql.y:1209
		{
			yyVAL.empty = struct{}{}
		}
	case 258:
		//line sql.y:1211
		{
			yyVAL.empty = struct{}{}
		}
	case 259:
		//line sql.y:1214
		{
			yyVAL.empty = struct{}{}
		}
	case 260:
		//line sql.y:1216
		{
			yyVAL.empty = struct{}{}
		}
	case 261:
		//line sql.y:1219
		{
			yyVAL.boolVal = false
		}
	case 262:
		//line sql.y:1221
		{
			yyVAL.boolVal = true
		}
	case 263:
		//line sql.y:1224
		{
			yyVAL.intVal = 0
		}
	case 264:
		//line sql.y:1226
		{
			yyVAL.intVal = yyS[yypt-1].intVal
		}
	case 265:
		//line sql.y:1230
		{
			i, ok := parseInt(yylex, yyS[yypt-0].str)
			if !ok {
				return 1
			}
			yyVAL.intVal = i
		}
	case 266:
		//line sql.y:1239
		{
			yyVAL.intVal2[0], yyVAL.intVal2[1] = 0, 0
		}
	case 267:
		//line sql.y:1241
		{
			yyVAL.intVal2[0], yyVAL.intVal2[1] = yyS[yypt-3].intVal, yyS[yypt-1].intVal
		}
	case 268:
		//line sql.y:1244
		{
			yyVAL.intVal2[0], yyVAL.intVal2[1] = 0, 0
		}
	case 269:
		//line sql.y:1246
		{
			yyVAL.intVal2[0], yyVAL.intVal2[1] = yyS[yypt-2].intVal, yyS[yypt-1].intVal
		}
	case 270:
		//line sql.y:1249
		{
			yyVAL.intVal = 0
		}
	case 271:
		//line sql.y:1251
		{
			yyVAL.intVal = yyS[yypt-0].intVal
		}
	case 272:
		//line sql.y:1254
		{
			yyVAL.boolVal = false
		}
	case 273:
		//line sql.y:1256
		{
			yyVAL.boolVal = true
		}
	case 274:
		//line sql.y:1259
		{
			yyVAL.empty = struct{}{}
		}
	case 275:
		//line sql.y:1261
		{
			yyVAL.empty = struct{}{}
		}
	case 276:
		//line sql.y:1264
		{
			yyVAL.str = ""
		}
	case 277:
		//line sql.y:1266
		{
			yyVAL.str = yyS[yypt-0].str
		}
	case 278:
		//line sql.y:1270
		{
			yyVAL.str = strings.ToLower(yyS[yypt-0].str)
		}
	case 279:
		//line sql.y:1273
		{
			forceEOF(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
